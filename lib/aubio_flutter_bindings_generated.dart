// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/aubio_flutter.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class AubioFlutterBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  AubioFlutterBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  AubioFlutterBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  ffi.Pointer<SharedAudioBuffer> aubio_create_shared_buffer(int size) {
    return _aubio_create_shared_buffer(size);
  }

  late final _aubio_create_shared_bufferPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<SharedAudioBuffer> Function(ffi.Uint32)>
      >('aubio_create_shared_buffer');
  late final _aubio_create_shared_buffer = _aubio_create_shared_bufferPtr
      .asFunction<ffi.Pointer<SharedAudioBuffer> Function(int)>();

  void aubio_release_shared_buffer(ffi.Pointer<SharedAudioBuffer> buf) {
    return _aubio_release_shared_buffer(buf);
  }

  late final _aubio_release_shared_bufferPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<SharedAudioBuffer>)>
      >('aubio_release_shared_buffer');
  late final _aubio_release_shared_buffer = _aubio_release_shared_bufferPtr
      .asFunction<void Function(ffi.Pointer<SharedAudioBuffer>)>();

  void aubio_pitch_detect(
    ffi.Pointer<SharedAudioBuffer> input,
    ffi.Pointer<SharedAudioBuffer> output,
    ffi.Pointer<ffi.Char> method,
    int samplerate,
  ) {
    return _aubio_pitch_detect(input, output, method, samplerate);
  }

  late final _aubio_pitch_detectPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<SharedAudioBuffer>,
            ffi.Pointer<SharedAudioBuffer>,
            ffi.Pointer<ffi.Char>,
            uint_t,
          )
        >
      >('aubio_pitch_detect');
  late final _aubio_pitch_detect = _aubio_pitch_detectPtr
      .asFunction<
        void Function(
          ffi.Pointer<SharedAudioBuffer>,
          ffi.Pointer<SharedAudioBuffer>,
          ffi.Pointer<ffi.Char>,
          int,
        )
      >();

  void aubio_lowpass_filter(
    ffi.Pointer<SharedAudioBuffer> buffer,
    double cutoff_freq,
    int samplerate,
  ) {
    return _aubio_lowpass_filter(buffer, cutoff_freq, samplerate);
  }

  late final _aubio_lowpass_filterPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<SharedAudioBuffer>, smpl_t, uint_t)
        >
      >('aubio_lowpass_filter');
  late final _aubio_lowpass_filter = _aubio_lowpass_filterPtr
      .asFunction<void Function(ffi.Pointer<SharedAudioBuffer>, double, int)>();

  void aubio_highcut_filter(
    ffi.Pointer<SharedAudioBuffer> buffer,
    double cutoff_freq,
    int samplerate,
  ) {
    return _aubio_highcut_filter(buffer, cutoff_freq, samplerate);
  }

  late final _aubio_highcut_filterPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<SharedAudioBuffer>, smpl_t, uint_t)
        >
      >('aubio_highcut_filter');
  late final _aubio_highcut_filter = _aubio_highcut_filterPtr
      .asFunction<void Function(ffi.Pointer<SharedAudioBuffer>, double, int)>();

  void aubio_fft_transform(
    ffi.Pointer<SharedAudioBuffer> input,
    ffi.Pointer<SharedAudioBuffer> real_out,
    ffi.Pointer<SharedAudioBuffer> imag_out,
    int fft_size,
  ) {
    return _aubio_fft_transform(input, real_out, imag_out, fft_size);
  }

  late final _aubio_fft_transformPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<SharedAudioBuffer>,
            ffi.Pointer<SharedAudioBuffer>,
            ffi.Pointer<SharedAudioBuffer>,
            uint_t,
          )
        >
      >('aubio_fft_transform');
  late final _aubio_fft_transform = _aubio_fft_transformPtr
      .asFunction<
        void Function(
          ffi.Pointer<SharedAudioBuffer>,
          ffi.Pointer<SharedAudioBuffer>,
          ffi.Pointer<SharedAudioBuffer>,
          int,
        )
      >();
}

final class SharedAudioBuffer extends ffi.Struct {
  external ffi.Pointer<ffi.Float> data;

  @ffi.Uint32()
  external int size;
}

/// unsigned integer
typedef uint_t = ffi.UnsignedInt;
typedef Dartuint_t = int;
typedef smpl_t = ffi.Float;
typedef Dartsmpl_t = double;
